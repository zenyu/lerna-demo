#!/usr/bin/env node

/* eslint-disable*/
"use strict";

var path = require('path');

var chalk = require('chalk');

var program = require('commander');

var clearConsole = require('react-dev-utils/clearConsole');

var Commander = program.constructor;
var fn = Commander.prototype.optionHelp;
clearConsole();
var Ruhnn = "\n  ____            _                     \n |  _ \\   _   _  | |__    _ __    _ __  \n | |_) | | | | | | '_ \\  | '_ \\  | '_ \\ \n |  _ <  | |_| | | | | | | | | | | | | |\n |_| \\_\\  \\__,_| |_| |_| |_| |_| |_| |_|\n\n"; // 开始打包

console.log(chalk.yellow(Ruhnn));
/**
 * 字符串填充
 * @param str
 * @param width
 * @return {string}
 */

function pad(str, width) {
  var len = Math.max(0, width - str.length);
  return str + Array(len + 1).join(' ');
} // 修改 help 输出内容


Commander.prototype.optionHelp = function optionHelp() {
  var result = fn.call(this);
  result = result.split('\n');
  result.pop();
  result.unshift("".concat(pad('-h, --help', this.padWidth()), "  \u4F7F\u7528\u65B9\u6CD5"));
  result = result.map(function (i) {
    return i.toLowerCase().indexOf('-v,') === 0 ? i.replace('output the version number', '输出版本号') : i;
  });
  result = result.map(function (i) {
    return i.replace('(default:', '(默认：');
  });
  return result.join('\n');
}; // 命令实例


var programmer = new Commander(); // 版本号

programmer.version(String(require('../package.json').version), '-v, --version'); // 命令行选项
// [option] 表示该选项接收值  -e dev => environment=dev
// 尖括号表示使用了该选项后，必须有值，方括号表示值可选
// 未标明 [xx]<xx> 则表示是个布尔值 -s sourceMap=true

var commandLineOptions = [{
  options: ['-c, --context <option>', '打包目录'],
  field: 'context'
}, {
  options: ['-p, --proxy <option>', '代理环境变量'],
  field: 'proxy'
}, {
  options: ['-e, --environment <option>', '打包环境变量'],
  field: 'environment'
}, {
  options: ['-b, --build-path <option>', '打包结果目录'],
  field: 'buildPath'
}, {
  options: ['-g, --no-gzip', '关闭 gzip 压缩生成 .gz 文件'],
  field: 'gzip'
}, {
  options: ['-s, --source-map', '是否生成 source-map 文件'],
  field: 'sourceMap'
}, {
  options: ['-i, --incompatible', '是否不用兼容之前的打包方式'],
  field: 'incompatible'
}, {
  options: ['-r, --root <option>', '静态文件服务根目录，即 homepage 字段'],
  field: 'root'
}];
var DEVELOPMENT = 'development';
var PRODUCTION = 'production'; // start || build 命令执行逻辑

var actionFactory = function actionFactory(cmd, env) {
  return function () {
    for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
      arg[_key] = arguments[_key];
    }

    var programmer = arg.pop(); // 命令行选项值

    var opts = {};
    commandLineOptions.map(function (i) {
      return i.field;
    }).forEach(function (i) {
      return programmer[i] !== undefined && (opts[i] = programmer[i]);
    }); // 别名

    var alias = {
      grey: 'gray',
      prod: PRODUCTION
    }; // 设置环境变量 NODE_ENV, 开发环境固定 development

    opts.environment = env === DEVELOPMENT ? DEVELOPMENT : alias[opts.environment] || opts.environment || env;
    process.env.NODE_ENV = opts.environment; // babel-preset-react-app 不接受其它值
    // babel 获取环境变量顺序   1. process.env.BABEL_ENV; 2. process.env.NODE_ENV 3. 'development'

    process.env.BABEL_ENV = ['development', 'production', 'test'].includes(opts.environment) ? opts.environment : 'production'; // TODO ori 环境变量为了兼容之前的打包

    opts.proxy && (process.env.ori = opts.proxy); // 环境变量初始化

    require('./config/env');

    var overwrite = require('./config/argInit')(opts); // 执行打包脚本


    require(path.join(__dirname, cmd + '.js'))(overwrite);
  };
}; // start 命令


var commandStart = programmer // command 第二个参数是 git-style 命令的描述，如：git(可执行命令行文件地址)
.command('start').alias('s').description('在本地启动一个开发服务').action(actionFactory('start', 'development'));
commandLineOptions.forEach(function (i) {
  return commandStart.option.apply(commandStart, i.options);
}); // build 命令

var commandBuild = programmer.command('build').alias('b').description('打包代码').action(actionFactory('build', 'production'));
commandLineOptions.forEach(function (i) {
  return commandBuild.option.apply(commandBuild, i.options);
}); // dll 命令

var commandList = function commandList(value) {
  return value.split(',');
};

programmer.command('dll').alias('d').description('打包 dll 文件').option('-l, --list <option>', '待打包列表', commandList).option('-p, --preset-list <option>', '从预设中选择', commandList).option('-n, --name <option>', 'dll 包名').option('-c, --config <option>', '重写配置文件路径').option('-w, --write <option>', '输出配置文件').action(function () {
  for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    arg[_key2] = arguments[_key2];
  }

  var command = arg.pop();
  var opts = {
    list: command.list,
    presetList: command.presetList,
    name: command.name,
    config: command.config,
    write: command.write
  };

  require('./config/packLibrary.js')('dll', opts);
}); // pack 命令

programmer.command('pack').alias('p').description('打包第三方库').option('-n, --name <option>', '库名').option('-e, --environment <option>', '打包环境变量', 'production').option('-c, --config <option>', '重写配置文件路径').option('-w, --write <option>', '输出配置文件').option('-m, --module', '打包 package.json::module 代码', false).action(function () {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var command = args.pop();
  var opts = {
    name: typeof command.name === 'string' ? command.name : require(path.resolve('package.json')).name,
    environment: command.environment,
    config: command.config,
    write: command.write,
    module: command.module
  };
  process.env.NODE_ENV = opts.environment || 'production';

  require('./config/packLibrary.js')('pack', opts);
}); // es 命令 等价于 pack -m

programmer.command('es').alias('e').description('打包 package.json::module 模块').action(function () {
  process.env.NODE_ENV = 'es6';

  require('./config/packLibrary.js')('es', {
    module: true
  });
});
programmer.parse(process.argv); // promise 未处理的 reject 事件处理

process.on('unhandledRejection', function (err) {
  throw err;
});