"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var styleLoader = require('./loader.style');

var jsLoader = require('./loader.javascript');

module.exports = function (whichEnv, overwrite) {
  var filenameWithHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var isEnvProduction = whichEnv.isEnvProduction;

  var _styleLoader = styleLoader(whichEnv, overwrite),
      cssLoader = _styleLoader.cssLoader,
      sassLoader = _styleLoader.sassLoader,
      lessLoader = _styleLoader.lessLoader;

  var _jsLoader = jsLoader(whichEnv),
      esLintRule = _jsLoader.esLintRule,
      babelSrcRule = _jsLoader.babelSrcRule,
      babelOutOfSrcRule = _jsLoader.babelOutOfSrcRule;

  return [// 禁用 require.ensure
  {
    parser: {
      requireEnsure: false
    }
  }].concat((0, _toConsumableArray2.default)(isEnvProduction ? [esLintRule] : []), [{
    // 顺序匹配，直到匹配该 loader 或 最后的 file-loader
    oneOf: [// 小于10k 的图片打包为 base64，否则统一放到 media 目录
    {
      test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
      loader: require.resolve('url-loader'),
      options: {
        limit: 10000,
        name: "media/[name]".concat(filenameWithHash ? '.[hash:8]' : '', ".[ext]")
      }
    }, // babel 打包 src 代码 包含 ruhnn-common 是为了兼容老代码
    babelSrcRule, // babel 打包除了 src ruhnn-common @babel/runtime 之外的代码
    babelOutOfSrcRule].concat((0, _toConsumableArray2.default)(cssLoader), (0, _toConsumableArray2.default)(sassLoader), (0, _toConsumableArray2.default)(lessLoader), [{
      loader: require.resolve('file-loader'),
      exclude: [/\.(js|mjs|jsx|ts|tsx)$/, /\.html$/, /\.json$/],
      options: {
        name: "static/[name]".concat(filenameWithHash ? '.[hash:8]' : '', ".[ext]")
      }
    }])
  }]);
};