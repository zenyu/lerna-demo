"use strict";

/* eslint-disable import/order,import/no-dynamic-require,global-require */
var path = require('path');

var fs = require('fs');

var url = require('url'); // 工作目录


var appDirectory = fs.realpathSync(process.cwd()); // 相对工作目录的路径 => 绝对路径

var resolveApp = function resolveApp(relativePath) {
  return path.resolve(appDirectory, relativePath);
}; // 静态服务目录


var envPublicUrl = process.env.PUBLIC_URL;
/**
 * 路径末尾添加或删除 /
 * @param inputPath  输入路径
 * @param needsSlash 是否需要 / 结尾
 * @return {*}
 */

function ensureSlash(inputPath, needsSlash) {
  var hasSlash = inputPath.endsWith('/');

  if (hasSlash && !needsSlash) {
    return inputPath.substr(0, inputPath.length - 1);
  }

  if (!hasSlash && needsSlash) {
    return "".concat(inputPath, "/");
  }

  return inputPath;
} // `PUBLIC_URL` 环境变量 ||  "homepage" 字段
// 作为打包后静态文件根目录


var getPublicUrl = function getPublicUrl(appPackageJson) {
  return envPublicUrl || require(appPackageJson).homepage;
}; // publicUrl 的 pathname 作为本地静态服务的根目录


function getServedPath(appPackageJson) {
  var publicUrl = getPublicUrl(appPackageJson);
  var servedUrl = publicUrl ? url.parse(publicUrl).pathname : '/';
  return ensureSlash(servedUrl, true);
}

var moduleFileExtensions = ['web.mjs', 'mjs', 'web.js', 'js', 'web.ts', 'ts', 'web.tsx', 'tsx', 'json', 'web.jsx', 'jsx'];
module.exports = {
  // 环境变量
  dotenv: resolveApp('.env'),
  // 工作目录
  appPath: resolveApp('.'),
  appSrc: resolveApp('src'),
  appDist: resolveApp('dist'),
  appPublic: resolveApp('public'),
  appPackageJson: resolveApp('package.json'),
  appTsConfig: resolveApp('tsconfig.json'),
  yarnLockFile: resolveApp('yarn.lock'),
  appPolyfill: resolveApp('public/polyfill.js'),
  proxySetup: resolveApp('src/setupProxy.js'),
  appNodeModules: resolveApp('node_modules'),
  // `PUBLIC_URL` 环境变量 ||  "homepage" 字段作为静态文件根目录
  publicUrl: getPublicUrl(resolveApp('package.json')),
  // publicUrl 的 pathname 作为本地静态服务的根目录
  servedPath: getServedPath(resolveApp('package.json')),
  // 以下字段随打包目录变化
  context: resolveApp('src'),
  appBuild: resolveApp('build'),
  appHtml: resolveApp('src/index.html'),
  appIndexJs: resolveApp('src/index.js'),
  overwrite: resolveApp('src/config-overwrite.js'),
  mocker: resolveApp('src/mocker.js')
};
/**
 * 在原 paths 对象上合并
 * @param source
 * @return {object}
 */

module.exports.mergePaths = function (source) {
  return Object.assign(module.exports, source);
};

module.exports.moduleFileExtensions = moduleFileExtensions;