"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/* eslint-disable */
var fs = require('fs');

var path = require('path');

var webpack = require('webpack');

var resolve = require('resolve');

var glob = require('glob');

var chalk = require('chalk');

var HtmlWebpackPlugin = require('html-webpack-plugin');

var WebpackBar = require('webpackbar');

var CopyWebpackPlugin = require('copy-webpack-plugin');

var CleanWebpackPlugin = require('clean-webpack-plugin');

var CompressionPlugin = require('compression-webpack-plugin');

var CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');

var InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin');

var MiniCssExtractPlugin = require('mini-css-extract-plugin');

var InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');

var WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');

var ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');

var ForkTsCheckerWebpackPlugin = require('react-dev-utils/ForkTsCheckerWebpackPlugin');

var typescriptFormatter = require('react-dev-utils/typescriptFormatter');

var paths = require('./paths');

var getClientEnvironment = require('./env'); // 是否将运行时代码添加至内联脚本


var shouldInlineRuntimeChunk = process.env.INLINE_RUNTIME_CHUNK !== 'false'; // 是否使用 ts

var useTypeScript = fs.existsSync(paths.appTsConfig);
var DEVELOPMENT = 'development';
var PRODUCTION = 'production';
/**
 * 生成 dll 配置
 * @param overwrite
 * @param wordDir 工作目录
 * @return {{dllPlugins: Array, manifests: Array, dll: Array}}
 */

var generateDllConfig = function generateDllConfig(overwrite, wordDir) {
  var dllPlugins = [],
      manifests = [],
      dll = [];

  if (overwrite.dll) {
    try {
      // ['react.manifest.json']
      manifests = overwrite.dll === '*' ? glob.sync('*.manifest.json', {
        cwd: paths.appPublic
      }) : Array.isArray(overwrite.dll) ? overwrite.dll.map(function (i) {
        return "".concat(i, ".manifest.json");
      }) : []; // ['*.manifest.json 磁盘路径']

      manifests = manifests.map(function (item) {
        return path.join(paths.appPublic, item);
      }); // ['*.dll.js 磁盘路径']

      dll = manifests.map(function (item) {
        return item.replace('.manifest.json', '.dll.js');
      }); // 插件配置

      dllPlugins = manifests.map(function (item) {
        return new webpack.DllReferencePlugin({
          context: wordDir,
          // 与DllPlugin中的那个context保持一致

          /**
           * 这个字段对应webpack.dll.config.js中生成的那个json文件的路径
           * webpack打包时，会检测此文件中的映射，不会把存在映射的包打包进 bundle.js
           */
          manifest: require(item)
        });
      });
    } catch (e) {
      dllPlugins = [];
      manifests = [];
      dll = [];
      console.log(chalk.red(e.message));
    }
  }

  return {
    dllPlugins: dllPlugins,
    manifests: manifests,
    dll: dll
  };
};

module.exports = function (webpackEnv, overwrite) {
  var isEnvDevelopment = webpackEnv === DEVELOPMENT;
  var isNotEnvDevelopment = !isEnvDevelopment;
  var isEnvProduction = webpackEnv === PRODUCTION;
  var publicPath = isEnvDevelopment ? '/' : paths.publicUrl; // `publicUrl` 去掉结尾 /

  var publicUrl = publicPath.slice(0, -1); // 注入 app 的环境变量

  var env = getClientEnvironment(publicUrl);

  var _generateDllConfig = generateDllConfig(overwrite, paths.appPath),
      dllPlugins = _generateDllConfig.dllPlugins,
      dll = _generateDllConfig.dll; // 只有开发时用到的 Plugins


  var developmentPlugin = isEnvDevelopment ? [// 热更新 css
  new webpack.HotModuleReplacementPlugin(), // 模块路径大小写敏感
  new CaseSensitivePathsPlugin(), // 未安装的模块自动安装，不用重启 webpack
  new WatchMissingNodeModulesPlugin(paths.appNodeModules)] : [];
  return [// 生成 `index.html` 注入 <script>
  new HtmlWebpackPlugin(Object.assign({}, {
    inject: true,
    template: paths.appHtml,
    publicUrl: paths.publicUrl,
    timeSpan: new Date() - 0
  }, isEnvProduction ? {
    minify: {
      removeComments: true,
      collapseWhitespace: true,
      removeRedundantAttributes: true,
      useShortDoctype: true,
      removeEmptyAttributes: true,
      removeStyleLinkTypeAttributes: true,
      keepClosingSlash: true,
      minifyJS: true,
      minifyCSS: true,
      minifyURLs: true
    }
  } : undefined)), //  webpack 运行时脚本内嵌
  isEnvProduction && shouldInlineRuntimeChunk && new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime~.+[.]js/]), // html 中注入环境变量
  new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw), // 模块查找失败错误提示
  new ModuleNotFoundPlugin(paths.appPath), // js 中注入环境变量
  new webpack.DefinePlugin(env.stringified), // 按需清空打包目录文件
  new CleanWebpackPlugin(), // 拷贝 public 目录下的文件
  new CopyWebpackPlugin([paths.appPublic].concat((0, _toConsumableArray2.default)(dll), (0, _toConsumableArray2.default)(overwrite.copy || overwrite.copyFiles || [])), {
    ignore: []
  })].concat((0, _toConsumableArray2.default)(dllPlugins), [// 压缩 css
  isNotEnvDevelopment && new MiniCssExtractPlugin({
    filename: 'css/[name].[contenthash:8].css',
    chunkFilename: 'css/[name].[contenthash:8].chunk.css'
  }), // 生成资源和相应输出文件之间的映射
  // new ManifestPlugin({
  //     fileName: 'asset-manifest.json',
  //     publicPath,
  // }),

  /**
   * 防止在 import 或 require 调用时，生成以下正则表达式匹配的模块
   * 下面配置意思是 moment.js 里 import ./local 目录下的模块都忽略
   */
  new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/), // TypeScript 类型检查
  useTypeScript && new ForkTsCheckerWebpackPlugin({
    typescript: resolve.sync('typescript', {
      basedir: paths.appNodeModules
    }),
    async: isEnvDevelopment,
    useTypescriptIncrementalApi: true,
    checkSyntacticErrors: true,
    tsconfig: paths.appTsConfig,
    reportFiles: ['**', '!**/*.json', '!**/__tests__/**', '!**/?(*.)(spec|test).*', '!**/src/setupProxy.*', '!**/src/setupTests.*'],
    watch: paths.appSrc,
    silent: true,
    // WebpackDevServe 时触发
    formatter: isNotEnvDevelopment ? typescriptFormatter : undefined
  }), // 打包进度条
  new WebpackBar({
    minimal: false
  }), // gzip 压缩
  isNotEnvDevelopment && overwrite.gzip && new CompressionPlugin({
    test: /\.(js|css|html)(\?.*)?$/i,
    cache: true
  })], developmentPlugin).filter(Boolean);
};