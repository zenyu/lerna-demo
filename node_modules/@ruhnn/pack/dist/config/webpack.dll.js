"use strict";

/* eslint-disable */

/**
 * 此配置在主配置之前单独执行
 * 用于将node_modules中的依赖打包成单独的 vender.dll.js文件
 * 打包输出 vender.dll.js vender-manefest.json
 * vender-manefest.json 保存依赖文件路径和自增id的映射，该文件用于主配置执行时将依赖文件路径替换为id
 *
 */
var path = require('path');

var webpack = require('webpack');

var WebpackBar = require('webpackbar');

var paths = require('./paths');

var WORK_DIR = paths.appPath;
var preset = {
  'react': ['react', 'react-dom', 'react-router', 'react-router-dom', 'react-loadable'],
  // 遍历package.json的所有依赖包
  'redux': ['redux', 'react-redux']
};

module.exports = function (overwrite) {
  var _overwrite$environmen = overwrite.environment,
      mode = _overwrite$environmen === void 0 ? 'production' : _overwrite$environmen,
      list = overwrite.list,
      name = overwrite.name;
  var presetList = overwrite.presetList;
  presetList = Array.isArray(presetList) ? presetList.filter(function (i) {
    return preset[i];
  }) : [];
  var entry = {}; // 预设选项

  if (presetList.length) {
    presetList.forEach(function (i) {
      return entry[i] = preset[i];
    });
  } // 自定义选项


  if (name && Array.isArray(list)) {
    entry[name] = list;
  }

  entry = Object.keys(entry).length ? entry : preset;
  return {
    mode: mode,
    entry: entry,
    output: {
      path: paths.appPublic,
      // 生成的文件存放路径
      filename: '[name].dll.js',
      // 生成的文件名字(默认为vendor.dll.js)
      library: '[name]_library' // 打包内容生成文件的映射关系，与下面DllPlugin中配置对应；以全局变量[name]_library方式暴露

    },
    plugins: [new webpack.DllPlugin({
      // 会生成一个json文件，里面是关于dll.js的一些配置信息
      path: path.join(paths.appPublic, '[name].manifest.json'),
      name: '[name]_library',
      // 与上面output中配置对应
      context: WORK_DIR // 上下文环境路径（必填，为了与DllReferencePlugin存在与同一上下文中）

    }), new WebpackBar({
      minimal: false
    })]
  };
};
/**
 * vendor.dll.js 整体结构
 */


"\nlet vendor_library = function(t) {\n    /**\n     * webpackBootStrap\n     */\nconst modules = {};\n\nfunction __webpack_require__(moduleId) {\n    if (modules[moduleId]) return modules[moduleId].exports;\n    var module = modules[moduleId] = {moduleId: moduleId, load: false, exports: {}};\n    return t[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = true, module.exports;\n}\n\n    return __webpack_require__(t.length - 1);\n}([\n    /**\n     * \u4F9D\u8D56\u6A21\u5757\n     * @param module\n     * @param exports\n     * @param __webpack_require__\n     */\n    function(module, exports, __webpack_require__) {\n        //module content\n        exports = {};\n    },\n    /**\n     * \u6700\u540E\u4E00\u4E2A\u56FA\u5B9A\u4E3A\u6B64\u51FD\u6570\uFF0C\u4E0D\u4F1A\u51FA\u73B0\u5728manifest.json\u4E2D  \u8FD4\u56DE__webpack_require__\n     * @param module\n     * @param exports\n     * @param __webpack_require__\n     */\n    function(module, exports, __webpack_require__) {\n        module.exports = __webpack_require__;\n    },\n]);\n ";
/**
 * vender.manifest.json
 */

"\nlet manifest = {\n    name: 'vendor_library',\n    context: {\n        './node_modules/prop-types/index.js': {\n            id: 0,\n            buildMeta: {\n                providedExports: true,\n            },\n        },\n    },\n};\n";
/* eslint-enable */