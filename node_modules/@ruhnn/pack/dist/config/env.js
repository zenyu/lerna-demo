"use strict";

/* eslint-disable import/order,import/no-dynamic-require,global-require */
var fs = require('fs');

var path = require('path');

var paths = require('./paths'); // 删除 paths 模块在 node 模块系统的缓存


delete require.cache[require.resolve('./paths')];
var NODE_ENV = process.env.NODE_ENV; // 环境变量文件优先级
// .env.[NODE_ENV].local .env.[NODE_ENV] .env.local .env
// 示例： .env.development.local > .env.development > .env.local > .env
// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use

var dotenvFiles = ["".concat(paths.dotenv, ".").concat(NODE_ENV, ".local"), "".concat(paths.dotenv, ".").concat(NODE_ENV), NODE_ENV !== 'test' && "".concat(paths.dotenv, ".local"), paths.dotenv].filter(Boolean); // 从 .env* 加载环境变量到 process.env

dotenvFiles.forEach(function (dotenvFile) {
  if (fs.existsSync(dotenvFile)) {
    require('dotenv-expand')(require('dotenv').config({
      path: dotenvFile
    }));
  }
}); // 使相对工作目录的 NODE_PATH 生效

var appDirectory = fs.realpathSync(process.cwd());
process.env.NODE_PATH = (process.env.NODE_PATH || '').split(path.delimiter).filter(function (folder) {
  return folder && !path.isAbsolute(folder);
}).map(function (folder) {
  return path.resolve(appDirectory, folder);
}).join(path.delimiter); // NODE_ENV && REACT_APP_* 环境变量会通过 DefinePlugin 注入

var REACT_APP = /^REACT_APP_/i;
/**
 * 返回环境变量对象 和 stringify 后的环境变量
 * @param publicUrl
 * @return {{raw: {NODE_ENV: *, PUBLIC_URL: *}, stringified: {'process.env': {}}}}
 */

function getClientEnvironment(publicUrl) {
  var raw = Object.keys(process.env).filter(function (key) {
    return REACT_APP.test(key);
  }).reduce(function (env, key) {
    env[key] = process.env[key];
    return env;
  }, {
    NODE_ENV: process.env.NODE_ENV || 'development',
    PUBLIC_URL: publicUrl,
    // TODO ori 环境变量为了兼容之前的打包
    ori: process.env.ori
  }); // Stringify all values so we can feed into Webpack DefinePlugin

  var stringified = {
    'process.env': Object.keys(raw).reduce(function (env, key) {
      env[key] = JSON.stringify(raw[key]);
      return env;
    }, {})
  };
  return {
    raw: raw,
    stringified: stringified
  };
}

module.exports = getClientEnvironment;