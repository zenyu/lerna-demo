"use strict";

/* eslint-disable */
var chalk = require('chalk');

var fs = require('fs-extra');

var path = require('path');

var webpack = require('webpack');

var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');

var execSync = require('child_process').execSync;

module.exports = function (type, opts) {
  var configFactory = require(type === 'pack' ? './webpack.pack.js' : './webpack.dll.js');

  var configOverwritePath = path.resolve(!opts.config // 工作目录下的 config-overwrite.js
  ? 'config-overwrite.js' : opts.config);
  var configOverwrite = fs.existsSync(configOverwritePath) ? require(configOverwritePath) : {};
  var _configOverwrite$outp = configOverwrite.output,
      output = _configOverwrite$outp === void 0 ? {} : _configOverwrite$outp; // package.json

  var packagePath = path.resolve('package.json');

  var json = require(packagePath);

  var filename = output.filename && !/[\[\]]/.test(output.filename) ? output.filename : 'index.js';
  console.log(chalk.green('\n 开始打包...\n')); // webpack 打包结束
  // 打包 pkg::module 代码

  if (opts.module) {
    try {
      fs.removeSync('./es');
      fs.copySync('./src', './es');
      execSync("./node_modules/.bin/cross-env NODE_ENV=es6 npx babel ./es -d ./es");
      json.module = "./es/".concat(filename);
    } catch (e) {
      throw e;
    }
  } // 只打包 es 目录


  if (type === 'es') {
    try {
      fs.writeFileSync(packagePath, JSON.stringify(json, undefined, 4));
    } catch (e) {
      console.log(chalk.red('package.json 写入 "main" 字段时发生错误，请自行写入'));
    }

    console.log(chalk.green(" \u6253\u5305\u5B8C\u6210"));
    return;
  }

  var config = configFactory(opts, configOverwrite);
  var compiler = webpack(config);
  compiler.run(function (err, stats) {
    var messages;

    if (err) {
      if (!err.message) {
        return console.log(err.message);
      }

      messages = formatWebpackMessages({
        errors: [err.message],
        warnings: []
      });
    } else {
      messages = formatWebpackMessages(stats.toJson({
        all: false,
        warnings: true,
        errors: true
      }));
    } // 显示错误信息


    if (messages.errors.length) {
      // 保留第一个错误信息，其余省略
      if (messages.errors.length > 1) {
        messages.errors.length = 1;
      }

      console.log(new Error(messages.errors.join('\n\n')));
      return;
    } // main 字段修改


    json.main = "./dist/".concat(filename);

    try {
      fs.writeFileSync(packagePath, JSON.stringify(json, undefined, 4));
    } catch (e) {
      console.log(chalk.red('package.json 写入 "main"、"module" 字段时发生错误，请自行写入'));
    }

    console.log(chalk.green(" \u6253\u5305\u5B8C\u6210"));
  });
};