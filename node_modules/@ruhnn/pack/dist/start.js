"use strict";

/* eslint-disable */
var fs = require('fs');

var chalk = require('react-dev-utils/chalk');

var webpack = require('webpack');

var WebpackDevServer = require('webpack-dev-server');

var clearConsole = require('react-dev-utils/clearConsole');

var _require = require('react-dev-utils/WebpackDevServerUtils'),
    choosePort = _require.choosePort,
    createCompiler = _require.createCompiler,
    prepareProxy = _require.prepareProxy,
    prepareUrls = _require.prepareUrls;

var openBrowser = require('react-dev-utils/openBrowser');

var paths = require('./config/paths');

var configFactory = require('./config/webpack.config');

var createDevServerConfig = require('./config/webpackDevServer.config');

var useYarn = fs.existsSync(paths.yarnLockFile);
var isInteractive = process.stdout.isTTY;
var DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
var HOST = process.env.HOST || '0.0.0.0';

var _require2 = require('react-dev-utils/browsersHelper'),
    checkBrowsers = _require2.checkBrowsers;

module.exports = function (overwrite) {
  // 必须要有 browserlist 建议放 package.json::browserslist
  // 其它配置方式也允许
  checkBrowsers(paths.appPath, isInteractive) // 选择端口
  .then(function () {
    return choosePort(HOST, DEFAULT_PORT);
  }).then(function (port) {
    if (port == null) {
      // 未选中端口
      return;
    } // 开发环境 webpack 配置


    var config = configFactory('development', overwrite);
    var protocol = process.env.HTTPS === 'true' ? 'https' : 'http';

    var appName = require(paths.appPackageJson).name;

    var useTypeScript = fs.existsSync(paths.appTsConfig);
    var urls = prepareUrls(protocol, HOST, port);
    var devSocket = {
      warnings: function warnings(_warnings) {
        return devServer.sockWrite(devServer.sockets, 'warnings', _warnings);
      },
      errors: function errors(_errors) {
        return devServer.sockWrite(devServer.sockets, 'errors', _errors);
      }
    }; // 创建 webpack 实例，格式化提示信息

    var compiler = createCompiler({
      appName: appName,
      config: config,
      devSocket: devSocket,
      urls: urls,
      useYarn: useYarn,
      useTypeScript: useTypeScript,
      webpack: webpack
    }); // 正向代理配置

    var proxySetting = require(paths.appPackageJson).proxy;

    var proxyConfig = prepareProxy(proxySetting, paths.appPublic); // Webpack Server 配置

    var serverConfig = createDevServerConfig( // devServer.proxy 字段优先级
    // 1. config-overwrite.js
    // 2. package.json..proxy (String)
    proxyConfig, urls.lanUrlForConfig, // 重写 devServer 配置
    overwrite);
    var devServer = new WebpackDevServer(compiler, serverConfig); // 启动 webpackDevServer

    devServer.listen(port, HOST, function (err) {
      if (err) {
        return console.log(err);
      }

      if (isInteractive) {
        clearConsole();
      }

      console.log(chalk.cyan('  启动服务...\n'));
      openBrowser(urls.localUrlForBrowser);
    }); // 监听退出信号

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });
  }).catch(function (err) {
    if (err && err.message) {
      console.log(err.message);
    }

    process.exit(1);
  });
};