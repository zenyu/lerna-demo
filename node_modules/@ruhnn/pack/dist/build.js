"use strict";

/* eslint-disable */
var path = require('path');

var chalk = require('chalk');

var fs = require('fs-extra');

var webpack = require('webpack');

var bfj = require('bfj');

var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');

var printHostingInstructions = require('react-dev-utils/printHostingInstructions');

var FileSizeReporter = require('react-dev-utils/FileSizeReporter');

var printBuildError = require('react-dev-utils/printBuildError');

var _require = require('react-dev-utils/browsersHelper'),
    checkBrowsers = _require.checkBrowsers;

var configFactory = require('./config/webpack.config');

var paths = require('./config/paths');

var measureFileSizesBeforeBuild = FileSizeReporter.measureFileSizesBeforeBuild;
var printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;
var useYarn = fs.existsSync(paths.yarnLockFile); // 打包结果太大，提示

var WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
var WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;
var isInteractive = process.stdout.isTTY;

module.exports = function (overwrite) {
  var argv = process.argv.slice(2);
  var writeStatsJson = argv.indexOf('--stats') !== -1;
  var config = configFactory(process.env.NODE_ENV || 'production', overwrite);
  checkBrowsers(paths.appPath, isInteractive).then(function () {
    return measureFileSizesBeforeBuild(paths.appBuild);
  }).then(build).then(function (_ref) {
    var stats = _ref.stats,
        previousFileSizes = _ref.previousFileSizes,
        warnings = _ref.warnings;

    if (warnings.length) {
      console.log(chalk.yellow('警告⚠️\n'));
      console.log(warnings.join('\n\n'));
      console.log(chalk.yellow("\n\u5728\u8B66\u544A\u4EE3\u7801\u524D\u6DFB\u52A0 ".concat(chalk.cyan('// eslint-disable-next-line'), " \u7981\u7528\u5BF9\u8BE5\u884C eslint \u68C0\u67E5\n")));
    } else {
      console.log(chalk.green('\n'));
    }

    console.log('文件 gzip 压缩后尺寸:\n');
    printFileSizesAfterBuild(stats, previousFileSizes, paths.appBuild, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);
    console.log();

    var appPackage = require(paths.appPackageJson);

    var publicUrl = paths.publicUrl;
    var publicPath = config.output.publicPath;
    var buildFolder = path.relative(process.cwd(), paths.appBuild);
    printHostingInstructions(appPackage, publicUrl, publicPath, buildFolder, useYarn);
    console.log(chalk.yellow("\u6CE8\u610F\u26A0\uFE0F: \u5982\u679C\u6539\u8FC7webpack\u914D\u7F6E\u6216\u5347\u7EA7\u8FC7node_modules,\u53EF\u80FD\u8981\u5220\u9664node_modules/.cache-loader\u624D\u4F1A\u751F\u6548\uFF01"));
    console.log(chalk.green("\u6253\u5305\u7528\u65F6: ".concat((stats.endTime - stats.startTime) / 1000, "s")));
  }, function (err) {
    console.log(chalk.red('编译失败\n'));
    printBuildError(err);
    process.exit(1);
  }).catch(function (err) {
    if (err && err.message) {
      console.log(err.message);
    }

    process.exit(1);
  });

  function build(previousFileSizes) {
    console.log(chalk.green('\n 开始打包...\n'));
    var compiler = webpack(config);
    return new Promise(function (resolve, reject) {
      compiler.run(function (err, stats) {
        var messages;

        if (err) {
          if (!err.message) {
            return reject(err);
          }

          messages = formatWebpackMessages({
            errors: [err.message],
            warnings: []
          });
        } else {
          messages = formatWebpackMessages(stats.toJson({
            all: false,
            warnings: true,
            errors: true
          }));
        }

        if (messages.errors.length) {
          // 保留第一个错误信息，其余省略
          if (messages.errors.length > 1) {
            messages.errors.length = 1;
          }

          return reject(new Error(messages.errors.join('\n\n')));
        }

        if (process.env.CI && (typeof process.env.CI !== 'string' || process.env.CI.toLowerCase() !== 'false') && messages.warnings.length) {
          console.log(chalk.yellow('\nTreating warnings as errors because process.env.CI = true.\n' + 'Most CI servers set it automatically.\n'));
          return reject(new Error(messages.warnings.join('\n\n')));
        }

        var resolveArgs = {
          stats: stats,
          previousFileSizes: previousFileSizes,
          warnings: messages.warnings
        };

        if (writeStatsJson) {
          return bfj.write("".concat(paths.appBuild, "/bundle-stats.json"), stats.toJson()).then(function () {
            return resolve(resolveArgs);
          }).catch(function (error) {
            return reject(new Error(error));
          });
        }

        return resolve(resolveArgs);
      });
    });
  }
};