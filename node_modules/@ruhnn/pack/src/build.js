/* eslint-disable */
const path = require('path');
const chalk = require('chalk');
const fs = require('fs-extra');
const webpack = require('webpack');
const bfj = require('bfj');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const printHostingInstructions = require('react-dev-utils/printHostingInstructions');
const FileSizeReporter = require('react-dev-utils/FileSizeReporter');
const printBuildError = require('react-dev-utils/printBuildError');
const {checkBrowsers} = require('react-dev-utils/browsersHelper');
const configFactory = require('./config/webpack.config');
const paths = require('./config/paths');

const {measureFileSizesBeforeBuild} = FileSizeReporter;
const {printFileSizesAfterBuild} = FileSizeReporter;
const useYarn = fs.existsSync(paths.yarnLockFile);

// 打包结果太大，提示
const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;

const isInteractive = process.stdout.isTTY;

module.exports = function (overwrite) {
    const argv = process.argv.slice(2);
    const writeStatsJson = argv.indexOf('--stats') !== -1;
    const config = configFactory(process.env.NODE_ENV || 'production', overwrite);

    checkBrowsers(paths.appPath, isInteractive)
        .then(() => measureFileSizesBeforeBuild(paths.appBuild))
        .then(build)
        .then(
            ({stats, previousFileSizes, warnings}) => {
                if (warnings.length) {
                    console.log(chalk.yellow('警告⚠️\n'));
                    console.log(warnings.join('\n\n'));
                    console.log(chalk.yellow(`\n在警告代码前添加 ${
                        chalk.cyan('// eslint-disable-next-line')} 禁用对该行 eslint 检查\n`));
                } else {
                    console.log(chalk.green('\n'));
                }

                console.log('文件 gzip 压缩后尺寸:\n');
                printFileSizesAfterBuild(
                    stats,
                    previousFileSizes,
                    paths.appBuild,
                    WARN_AFTER_BUNDLE_GZIP_SIZE,
                    WARN_AFTER_CHUNK_GZIP_SIZE,
                );
                console.log();

                const appPackage = require(paths.appPackageJson);
                const {publicUrl} = paths;
                const {publicPath} = config.output;
                const buildFolder = path.relative(process.cwd(), paths.appBuild);
                printHostingInstructions(
                    appPackage,
                    publicUrl,
                    publicPath,
                    buildFolder,
                    useYarn,
                );
                console.log(chalk.yellow(`注意⚠️: 如果改过webpack配置或升级过node_modules,可能要删除node_modules/.cache-loader才会生效！`));
                console.log(chalk.green(`打包用时: ${(stats.endTime - stats.startTime) / 1000}s`));
            },
            err => {
                console.log(chalk.red('编译失败\n'));
                printBuildError(err);
                process.exit(1);
            },
        )
        .catch(err => {
            if (err && err.message) {
                console.log(err.message);
            }
            process.exit(1);
        });

    function build(previousFileSizes) {
        console.log(chalk.green('\n 开始打包...\n'));

        const compiler = webpack(config);
        return new Promise((resolve, reject) => {
            compiler.run((err, stats) => {
                let messages;
                if (err) {
                    if (!err.message) {
                        return reject(err);
                    }
                    messages = formatWebpackMessages({
                        errors: [err.message],
                        warnings: [],
                    });
                } else {
                    messages = formatWebpackMessages(
                        stats.toJson({all: false, warnings: true, errors: true}),
                    );
                }
                if (messages.errors.length) {
                    // 保留第一个错误信息，其余省略
                    if (messages.errors.length > 1) {
                        messages.errors.length = 1;
                    }
                    return reject(new Error(messages.errors.join('\n\n')));
                }
                if (
                    process.env.CI
                    && (typeof process.env.CI !== 'string'
                    || process.env.CI.toLowerCase() !== 'false')
                    && messages.warnings.length
                ) {
                    console.log(
                        chalk.yellow(
                            '\nTreating warnings as errors because process.env.CI = true.\n'
                            + 'Most CI servers set it automatically.\n',
                        ),
                    );
                    return reject(new Error(messages.warnings.join('\n\n')));
                }

                const resolveArgs = {
                    stats,
                    previousFileSizes,
                    warnings: messages.warnings,
                };
                if (writeStatsJson) {
                    return bfj
                        .write(`${paths.appBuild}/bundle-stats.json`, stats.toJson())
                        .then(() => resolve(resolveArgs))
                        .catch(error => reject(new Error(error)));
                }

                return resolve(resolveArgs);
            });
        });
    }
};
