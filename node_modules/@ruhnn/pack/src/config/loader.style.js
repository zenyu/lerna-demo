/* eslint-disable global-require */
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');
const path = require('path');
const paths = require('./paths');

// 样式文件匹配正则
const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const sassRegex = /\.(scss|sass)$/;
const sassModuleRegex = /\.module\.(scss|sass)$/;
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;

/**
 * 返回样式相关的 Rule 配置
 * @param isEnvDevelopment  是否打包开发环境
 * @param isEnvProduction   是否打包生产环境
 * @param overwrite
 * @param overwrite.incompatible 是否不用兼容老的打包方式
 * @param overwrite.sourceMap    是否生成 source map
 * @return {{cssLoader: *[], lessLoader: *[], sassLoader: *[]}}
 */
module.exports = ({isEnvDevelopment, isEnvProduction}, overwrite) => {
    const {incompatible} = overwrite;

    // sourceMap 控制所有 sourceMap是否生成
    // 若命令行未指定 sourceMap, 则生产环境不生成sourceMap，其它环境都生成
    const sourceMap = overwrite.sourceMap === undefined
        ? !isEnvProduction
        : Boolean(overwrite.sourceMap);

    const publicPath = isEnvDevelopment ? '/' : paths.publicUrl;

    // 是否使用相对路径作为静态文件服务根
    const shouldUseRelativeAssetPaths = publicPath === './';

    // 返回样式文件 loader
    const getStyleLoaders = (cssOptions, preProcessor) => {
        const loaders = [
            // TODO: style-loader || mini-css-extract-plugin
            isEnvDevelopment
                ? require.resolve('style-loader')
                : {
                    loader: MiniCssExtractPlugin.loader,
                    options: Object.assign(
                        {},
                        // 图片都放在 media 文件夹下；
                        // publicPath 使用相对路径时，背景图 url 会相对当前 css
                        // ./  会在当前 css 文件目录下查找 media，会出错
                        // ../ 可以正确引用到 media
                        shouldUseRelativeAssetPaths ? {publicPath: '../'} : undefined,
                    ),
                },
            // TODO: cache-loader
            {
                loader: 'cache-loader',
                options: {
                    cacheDirectory: path.resolve('node_modules/.cache-loader'),
                },
            },
            // TODO: css-loader
            {
                loader: require.resolve('css-loader'),
                options: cssOptions,
            },
            // TODO: postcss-loader
            // 基于 package.json 指定的浏览器添加 css 前缀
            {
                loader: require.resolve('postcss-loader'),
                options: {
                    ident: 'postcss',
                    plugins: () => [
                        require('postcss-flexbugs-fixes'),
                        require('postcss-preset-env')({
                            autoprefixer: {
                                flexbox: 'no-2009',
                            },
                            stage: 3,
                        }),
                    ],
                    sourceMap,
                },
            },
        ].filter(Boolean);
        if (preProcessor) {
            loaders.push(
                typeof preProcessor === 'string'
                    ? require.resolve(preProcessor)
                    : preProcessor,
            );
        }
        return loaders;
    };


    // TODO: css-rule 为兼容老的项目
    const cssLoader = incompatible
        ? [
            // .css
            {
                test: cssRegex,
                exclude: cssModuleRegex,
                use: getStyleLoaders({importLoaders: 1}),
                sideEffects: true,
            },
            // 对 .module.css 的文件使用 css module
            {
                test: cssModuleRegex,
                use: getStyleLoaders({
                    importLoaders: 1,
                    sourceMap,
                    modules: true,
                    getLocalIdent: getCSSModuleLocalIdent,
                }),
            },
        ]
        : [
            {
                test: /\.css$/,
                include: [
                    /\/common\/.+/,
                    /common\.css/,
                    /[/\\\\]node_modules[/\\\\]/,
                    /node_modules\/@ruhnn\/common/,
                ],
                use: getStyleLoaders({
                    importLoaders: 1,
                }),
            },
            {
                test: /\.css$/,
                // 除了 common 目录下的css 其它 css 都默认是局部css
                include: paths.appSrc,
                // 排除common 目录下的css
                exclude: [/\/common\/.+/, /common\.css/],
                use: getStyleLoaders({
                    modules: true,
                    importLoaders: 1,
                    getLocalIdent: getCSSModuleLocalIdent,
                }),
            },
        ];

    // TODO: sass-rule
    const sassLoader = [
        // .sass
        {
            test: sassRegex,
            exclude: sassModuleRegex,
            use: getStyleLoaders(
                {
                    importLoaders: 2,
                    sourceMap,
                },
                'sass-loader',
            ),
            sideEffects: true,
        },
        // 对 .module.scss || .module.sass 使用 css module
        {
            test: sassModuleRegex,
            use: getStyleLoaders(
                {
                    importLoaders: 2,
                    sourceMap,
                    modules: true,
                    getLocalIdent: getCSSModuleLocalIdent,
                },
                'sass-loader',
            ),
        }];

    const lessOption = (overwrite.style && overwrite.style.less) || {};
    // TODO: less-rule 为兼容老的项目
    const lessLoader = incompatible
        ? [
            // .less
            {
                test: lessRegex,
                exclude: lessModuleRegex,
                use: getStyleLoaders(
                    {
                        importLoaders: 2,
                        sourceMap,
                    },
                    {
                        loader: require.resolve('less-loader'),
                        // less3.0以上
                        options: {
                            javascriptEnabled: true,
                            relativeUrls: false,
                            // TODO: antd
                            modifyVars: {
                                'font-size-base': '12px',
                                'font-family': `"Chinese Quote", -apple-system, BlinkMacSystemFont, "Segoe UI", "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
                            },
                            ...lessOption,
                        },
                    },
                ),
                sideEffects: true,
            },
            // 对 .module.less 使用 css module
            {
                test: lessModuleRegex,
                use: getStyleLoaders(
                    {
                        importLoaders: 2,
                        sourceMap,
                        modules: true,
                        getLocalIdent: getCSSModuleLocalIdent,
                    },
                    {
                        loader: require.resolve('less-loader'),
                        options: {
                            // less3.0以上 解决 Inline JavaScript is not enabled 问题
                            // https://github.com/ant-design/ant-design/issues/7927#issuecomment-372513256
                            javascriptEnabled: true,
                            // 解决 less 中 url(./file.png) 相对路径解析错误问题
                            // https://github.com/less/less.js/pull/3041
                            relativeUrls: false,
                        },
                    },
                ),
            }]
        : [
            {
                test: /\.less/,
                include: [/[/\\\\]node_modules[/\\\\]/],
                exclude: [/node_modules\/@ruhnn\/common/],
                use: getStyleLoaders({
                    modules: false,
                    importLoaders: 2,
                }, {
                    loader: require.resolve('less-loader'),
                    // less3.0以上
                    options: {
                        javascriptEnabled: true,
                        relativeUrls: false,
                        modifyVars: {
                            'font-size-base': '12px',
                            'font-family': `"Chinese Quote", -apple-system, BlinkMacSystemFont, "Segoe UI", "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
                        },
                        ...lessOption,
                    },
                }),
            },
            {
                test: /\.less$/,
                include: [paths.appSrc, /node_modules\/@ruhnn\/common/],
                use: getStyleLoaders({
                    modules: true,
                    importLoaders: 2,
                    localIdentName: '[local]___[hash:base64:5]',
                }, {
                    loader: require.resolve('less-loader'),
                    options: {
                        // less3.0以上 解决 Inline JavaScript is not enabled 问题
                        // https://github.com/ant-design/ant-design/issues/7927#issuecomment-372513256
                        javascriptEnabled: true,
                        // 解决 less 中 url(./file.png) 相对路径解析错误问题
                        // https://github.com/less/less.js/pull/3041
                        relativeUrls: false,
                    },
                }),
            },
        ];

    return {cssLoader, lessLoader, sassLoader};
};
