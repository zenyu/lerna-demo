/* eslint-disable */
const chalk = require('chalk');
const fs = require('fs-extra');
const path = require('path');
const webpack = require('webpack');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const execSync = require('child_process').execSync;

module.exports = (type, opts) => {
    const configFactory = require(type === 'pack'
        ? './webpack.pack.js'
        : './webpack.dll.js');

    const configOverwritePath = path.resolve(
        !opts.config
            // 工作目录下的 config-overwrite.js
            ? 'config-overwrite.js'
            : opts.config,
    );
    const configOverwrite = fs.existsSync(configOverwritePath)
        ? require(configOverwritePath)
        : {};
    const {output = {}} = configOverwrite;

    // package.json
    const packagePath = path.resolve('package.json');
    const json = require(packagePath);
    const filename = output.filename && !/[\[\]]/.test(output.filename)
        ? output.filename : 'index.js';

    console.log(chalk.green('\n 开始打包...\n'));
    // webpack 打包结束
    // 打包 pkg::module 代码
    if (opts.module) {
        try {
            fs.removeSync('./es');
            fs.copySync('./src', './es');
            execSync(`./node_modules/.bin/cross-env NODE_ENV=es6 npx babel ./es -d ./es`);
            json.module = `./es/${filename}`;
        } catch (e) {
            throw e;
        }
    }

    // 只打包 es 目录
    if (type === 'es') {
        try {
            fs.writeFileSync(packagePath, JSON.stringify(json, undefined, 4));
        } catch (e) {
            console.log(chalk.red('package.json 写入 "main" 字段时发生错误，请自行写入'));
        }
        console.log(chalk.green(` 打包完成`));
        return;
    }

    const config = configFactory(opts, configOverwrite);
    const compiler = webpack(config);

    compiler.run((err, stats) => {
        let messages;
        if (err) {
            if (!err.message) {
                return console.log(err.message);
            }
            messages = formatWebpackMessages({
                errors: [err.message],
                warnings: [],
            });
        } else {
            messages = formatWebpackMessages(
                stats.toJson({all: false, warnings: true, errors: true}),
            );
        }

        // 显示错误信息
        if (messages.errors.length) {
            // 保留第一个错误信息，其余省略
            if (messages.errors.length > 1) {
                messages.errors.length = 1;
            }
            console.log(new Error(messages.errors.join('\n\n')));
            return;
        }

        // main 字段修改
        json.main = `./dist/${filename}`;
        try {
            fs.writeFileSync(packagePath, JSON.stringify(json, undefined, 4));
        } catch (e) {
            console.log(chalk.red('package.json 写入 "main"、"module" 字段时发生错误，请自行写入'));
        }

        console.log(chalk.green(` 打包完成`));
    });
};