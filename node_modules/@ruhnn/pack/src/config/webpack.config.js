/* eslint-disable */
const fs = require('fs');
const path = require('path');
const merge = require('webpack-merge');
const PnpWebpackPlugin = require('pnp-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const safePostCssParser = require('postcss-safe-parser');
const ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const paths = require('./paths');
const allLoader = require('./loader.all');
const allPlugin = require('./plugin.all');

// 是否使用 ts
const useTypeScript = fs.existsSync(paths.appTsConfig);

const DEVELOPMENT = 'development';
const PRODUCTION = 'production';

module.exports = (webpackEnv, overwrite) => {
    ////////////////////////////////////////////////////////////////
    ///////////////////////////// 变量 /////////////////////////////
    ////////////////////////////////////////////////////////////////
    const isEnvDevelopment = webpackEnv === DEVELOPMENT;
    const isNotEnvDevelopment = !isEnvDevelopment;
    const isEnvProduction = webpackEnv === PRODUCTION;
    const whichEnv = {isEnvDevelopment, isNotEnvDevelopment, isEnvProduction};

    // sourceMap 控制所有 sourceMap是否生成
    // 若命令行未指定 sourceMap, 则生产环境不生成sourceMap，其它环境都生成
    const sourceMap = overwrite.sourceMap === undefined
        ? !isEnvProduction
        : Boolean(overwrite.sourceMap);
    // webpack devtool 字段指定 sourceMap 类型 inline-source-map,source-map,eval .etc
    const devtool = sourceMap
        && (isNotEnvDevelopment ? 'source-map' : 'cheap-module-source-map');

    const publicPath = isEnvDevelopment ? '/' : paths.publicUrl;

    // Rules
    const rules = allLoader(whichEnv, overwrite);

    // Plugins
    let plugins = allPlugin(whichEnv, overwrite);
    // 重写 HTML 配置
    if (
        overwrite.webpack
        && Array.isArray(overwrite.webpack.plugins)
        && overwrite.webpack.plugins.filter(i => (i instanceof HtmlWebpackPlugin)).length) {
        plugins = plugins.filter(i => !(i instanceof HtmlWebpackPlugin))
    }

    return merge({
        mode: isEnvDevelopment ? DEVELOPMENT : PRODUCTION,

        // 打包报错时，及时停止编译
        bail: isNotEnvDevelopment,

        // sourceMap
        devtool,

        /**
         * 数据类型
         *
         *  string |
         *  [string] |
         *  object { <key>: string | [string] }|
         *  ()=>string | [string] | object { <key>: string | [string] }
         *  Promise.resolve(string | [string] | object { <key>: string | [string] })
         *
         * 传入字符串或数组（string|[string]）chunk 命名为 main.js
         * 传入对象，则 key 为 chunk 名
         */
        entry: [
            // 热更新
            isEnvDevelopment
            && require.resolve('react-dev-utils/webpackHotDevClient'),
            // /public/polyfill.js || ie11+promise.proto.finally
            ...fs.existsSync(paths.appPolyfill)
                ? [paths.appPolyfill]
                : [
                    require.resolve('react-app-polyfill/ie11'),
                    require.resolve('./polyfills.js'),
                ],
            paths.appIndexJs,
        ].filter(Boolean),

        // 描述 chunk 的存放信息
        output: {
            // chunk输出目录
            path: isNotEnvDevelopment ? paths.appBuild : undefined,
            // 开发环境使用 在文件中添加包含模块的相关信息
            pathinfo: isEnvProduction,
            /**
             * chunk 名称 单入口时可以固定文件名，默认为 main.js
             * 多入口时用占位符方式保证唯一，
             * 占位符：
             *      name: 入口文件名
             *      id: 内部使用的 chunk id
             *      hash: 每次构建的唯一 hash
             *      chunkhash: 基于 chunk 内容计算的 hash
             */
            filename: isNotEnvDevelopment
                ? 'js/[name].[chunkhash:8].js'
                : 'js/bundle.js',
            // 非入口 chunk (code split)名称
            chunkFilename: isNotEnvDevelopment
                ? 'js/[name].[chunkhash:8].bundle.js'
                : 'js/[name].bundle.js',
            publicPath,
            // sourceMap 地址指向为原始磁盘路径
            devtoolModuleFilenameTemplate: isNotEnvDevelopment
                ? info => path.resolve(info.absoluteResourcePath).replace(/\\/g, '/')
                : info => path
                    .relative(paths.appSrc, info.absoluteResourcePath)
                    .replace(/\\/g, '/'),
        },

        // 代码优化
        optimization: {
            nodeEnv: process.env.NODE_ENV,
            minimize: isNotEnvDevelopment,
            minimizer: [
                // js 压缩
                new TerserPlugin({
                    terserOptions: {
                        parse: {
                            // 转换 ecma 8 代码
                            // 'compress' 'output' 使用 ecma 5，参考：
                            // https://github.com/facebook/create-react-app/pull/4234
                            ecma: 8,
                        },
                        compress: {
                            ecma: 5,
                            warnings: false,

                            // 关闭比较表达式优化  (a && a===1) || (a && a===2) -> a && (a===1||a===2)
                            comparisons: false,
                            // 内联调用压缩后存在 bug
                            // https://github.com/terser-js/terser/issues/120
                            inline: 2,
                        },
                        mangle: {
                            safari10: true,
                        },
                        output: {
                            ecma: 5,
                            comments: false,
                            // emoji 和 regex 编码可能有问题
                            // https://github.com/facebook/create-react-app/issues/2488
                            ascii_only: true,
                        },
                    },
                    // 多进程构建，默认：内核数目-1
                    parallel: true,
                    // 开启文件缓存
                    cache: true,
                    sourceMap,
                }),
                // 优化，压缩css
                new OptimizeCSSAssetsPlugin({
                    canPrint: false,
                    // cssnano 参数
                    cssProcessorOptions: {
                        safe: true,
                        parser: safePostCssParser,
                        map: sourceMap
                            ? {
                                // `inline: false` 生成 souceMap 文件
                                inline: false,
                                // `annotation: true` 会在 css 底部添加 sourceMappingURL, 浏览器籍此找到 sourceMap
                                annotation: true,
                            }
                            : false,
                    },
                }),
            ],
            // 分割公共代码
            splitChunks: {
                chunks: 'all',
                name: false,
                // TODO 可选若初始化工具时指定了 antd 则可作为优化项
                cacheGroups: {
                    ant: {
                        test: /antd/,
                        priority: 1,
                    },
                },
            },
            // webpack bootstrap单独一个文件，可以长期缓存
            runtimeChunk: true,
        },

        // 解析模块配置
        resolve: {
            // 路径别名 方便从子业务调用公用组件 避免 '../../../components/'
            alias: {
                common: path.join(paths.appSrc, './common'),
                components: path.join(paths.appSrc, './components'),
                containers: path.join(paths.appSrc, './containers'),
                // React Native Web
                'react-native': 'react-native-web',
            },
            // 指定 webpack 查找模块的目录
            modules: ['node_modules'].concat(
                // `env.js` 确保 process.env.NODE_PATH 存在
                process.env.NODE_PATH.split(path.delimiter).filter(Boolean),
            ),
            // 若模块路径指向文件，则尝试自动添加后缀尝试查找文件
            extensions: paths.moduleFileExtensions
                .map(ext => `.${ext}`)
                .filter(ext => useTypeScript || !ext.includes('ts')),
            plugins: [
                // 为 webpack 提供即插即用特性
                PnpWebpackPlugin,
                // 防止用户引用 src 或 node_modules 外的文件
                new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson]),
            ],
        },

        // 解析 loader 路径
        resolveLoader: {
            plugins: [
                // 指定 webpack 从当前包加载 loader
                PnpWebpackPlugin.moduleLoader(module),
            ],
        },

        // 这些选项决定了如何处理项目中的不同类型的模块
        module: {
            // 每个模块是否必须有 exports
            // strictExportPresence: true,
            /**
             * 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。
             * 能够对模块(module)应用 loader，或者修改解析器(parser)。
             *
             * 每个rule的参数可分为三类：
             *  1. 条件：test, include, exclude 和 resource
             *  2. 结果：loader, options, use
             *  3. 嵌套规则：oneof, rules
             */
            rules,
        },

        // 插件列表
        plugins,

        /**
         * 是否 polyfill 或 mock 某些 Node.js 全局变量和模块
         * 这里提供空对象 因为web环境不会用到
         */
        node: {
            module: 'empty',
            dgram: 'empty',
            dns: 'mock',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty',
        },

        // 关闭性能程序，因为用了自己的 FileSizeReporter
        performance: false,
    }, overwrite.webpack || {});
};
