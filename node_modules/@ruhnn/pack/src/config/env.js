/* eslint-disable import/order,import/no-dynamic-require,global-require */

const fs = require('fs');
const path = require('path');
const paths = require('./paths');

// 删除 paths 模块在 node 模块系统的缓存
delete require.cache[require.resolve('./paths')];

const NODE_ENV = process.env.NODE_ENV;

// 环境变量文件优先级
// .env.[NODE_ENV].local .env.[NODE_ENV] .env.local .env
// 示例： .env.development.local > .env.development > .env.local > .env
// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use
const dotenvFiles = [
    `${paths.dotenv}.${NODE_ENV}.local`,
    `${paths.dotenv}.${NODE_ENV}`,
    NODE_ENV !== 'test' && `${paths.dotenv}.local`,
    paths.dotenv,
].filter(Boolean);

// 从 .env* 加载环境变量到 process.env
dotenvFiles.forEach(dotenvFile => {
    if (fs.existsSync(dotenvFile)) {
        require('dotenv-expand')(
            require('dotenv').config({
                path: dotenvFile,
            }),
        );
    }
});

// 使相对工作目录的 NODE_PATH 生效
const appDirectory = fs.realpathSync(process.cwd());
process.env.NODE_PATH = (process.env.NODE_PATH || '')
    .split(path.delimiter)
    .filter(folder => folder && !path.isAbsolute(folder))
    .map(folder => path.resolve(appDirectory, folder))
    .join(path.delimiter);

// NODE_ENV && REACT_APP_* 环境变量会通过 DefinePlugin 注入
const REACT_APP = /^REACT_APP_/i;

/**
 * 返回环境变量对象 和 stringify 后的环境变量
 * @param publicUrl
 * @return {{raw: {NODE_ENV: *, PUBLIC_URL: *}, stringified: {'process.env': {}}}}
 */
function getClientEnvironment(publicUrl) {
    const raw = Object.keys(process.env)
        .filter(key => REACT_APP.test(key))
        .reduce(
            (env, key) => {
                env[key] = process.env[key];
                return env;
            },
            {
                NODE_ENV: process.env.NODE_ENV || 'development',
                PUBLIC_URL: publicUrl,
                // TODO ori 环境变量为了兼容之前的打包
                ori: process.env.ori,
            },
        );
    // Stringify all values so we can feed into Webpack DefinePlugin
    const stringified = {
        'process.env': Object.keys(raw).reduce((env, key) => {
            env[key] = JSON.stringify(raw[key]);
            return env;
        }, {}),
    };

    return {raw, stringified};
}

module.exports = getClientEnvironment;
