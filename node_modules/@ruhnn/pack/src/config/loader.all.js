const styleLoader = require('./loader.style');
const jsLoader = require('./loader.javascript');

module.exports = (whichEnv, overwrite, filenameWithHash = true) => {
    const {isEnvProduction} = whichEnv;
    const {cssLoader, sassLoader, lessLoader} = styleLoader(whichEnv, overwrite);
    const {esLintRule, babelSrcRule, babelOutOfSrcRule} = jsLoader(whichEnv);

    return [
        // 禁用 require.ensure
        {parser: {requireEnsure: false}},
        // 打包测试|灰度|正式代码使用 eslint
        ...(isEnvProduction ? [esLintRule] : []),
        {
            // 顺序匹配，直到匹配该 loader 或 最后的 file-loader
            oneOf: [
                // 小于10k 的图片打包为 base64，否则统一放到 media 目录
                {
                    test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
                    loader: require.resolve('url-loader'),
                    options: {
                        limit: 10000,
                        name: `media/[name]${filenameWithHash ? '.[hash:8]' : ''}.[ext]`,
                    },
                },
                // babel 打包 src 代码 包含 ruhnn-common 是为了兼容老代码
                babelSrcRule,
                // babel 打包除了 src ruhnn-common @babel/runtime 之外的代码
                babelOutOfSrcRule,
                ...cssLoader,
                ...sassLoader,
                ...lessLoader,
                {
                    loader: require.resolve('file-loader'),
                    exclude: [/\.(js|mjs|jsx|ts|tsx)$/, /\.html$/, /\.json$/],
                    options: {
                        name: `static/[name]${filenameWithHash ? '.[hash:8]' : ''}.[ext]`,
                    },
                },
            ],
        },
    ];
};