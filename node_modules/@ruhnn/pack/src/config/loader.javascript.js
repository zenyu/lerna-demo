const path = require('path');
const paths = require('./paths');

module.exports = ({isEnvDevelopment, isEnvProduction}) => {
    const esLintRule = {
        test: /\.(js|mjs|jsx)$/,
        include: paths.appSrc,
        enforce: 'pre',
        use: [
            {
                options: {
                    // 参数传递给 eslint CLIEngine
                    // https://eslint.org/docs/developer-guide/nodejs-api#cliengine
                    formatter: require.resolve('react-dev-utils/eslintFormatter'),
                    eslintPath: require.resolve('eslint'),
                },
                loader: require.resolve('eslint-loader'),
            },
        ],
    };

    // babel 打包 src 代码 ruhnn-common 为了兼容老代码
    const babelSrcRule = {
        test: /\.(js|mjs|jsx|ts|tsx)$/,
        // TODO: 兼容 @ruhnn/common
        include: [paths.appSrc, /node_modules\/@ruhnn\/common/],
        use: [
            // 多线程
            ...(isEnvDevelopment ? [
                {
                    loader: require.resolve('thread-loader'),
                    options: {
                        poolTimeout: Infinity,
                    },
                }] : []),
            // TODO: cache-loader
            {
                loader: 'cache-loader',
                options: {
                    cacheDirectory: path.resolve('node_modules/.cache-loader'),
                },
            },
            {
                loader: require.resolve('babel-loader'),
                options: {
                    customize: require.resolve(
                        'babel-preset-react-app/webpack-overrides',
                    ),
                    plugins: [
                        [
                            require.resolve('babel-plugin-named-asset-import'),
                            {
                                loaderMap: {
                                    svg: {
                                        ReactComponent: '@svgr/webpack?-svgo,+ref![path]',
                                    },
                                },
                            },
                        ],
                        // 在开发时开启react-hot-loader
                        ...(isEnvDevelopment ? ['react-hot-loader/babel'] : []),
                    ],
                    // 缓存 /node_modules/.cache 加快重新打包速度
                    cacheDirectory: true,
                    cacheCompression: isEnvProduction,
                    compact: isEnvProduction,
                },
            },
        ],
    };

    // babel 打包 src ruhnn-common @babel/runtime 之外的代码
    const babelOutOfSrcRule = {
        test: /\.(js|mjs)$/,
        exclude: /@babel(?:\/|\\{1,2})runtime/,
        loader: require.resolve('babel-loader'),
        options: {
            babelrc: false,
            configFile: false,
            compact: false,
            presets: [
                [
                    require.resolve('babel-preset-react-app/dependencies'),
                    {helpers: true},
                ],
            ],
            cacheDirectory: true,
            cacheCompression: isEnvProduction,
            sourceMaps: false,
        },
    };

    return {esLintRule, babelSrcRule, babelOutOfSrcRule};
};
