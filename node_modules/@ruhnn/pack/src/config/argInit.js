/* eslint-disable */
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const paths = require('./paths');
const getClientEnvironment = require('./env');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');

const mes = `
请指定正确的打包目录，一个标准的打包目录应至少包含以下文件

projectDirectory    (打包目录)
    - index.html    (模板文件)
    - index.js      (打包入口文件)
`;

/**
 * 1. 修改 paths 打包目录相关字段
 * 2. 必要文件检查
 * 3. 合并重写配置对象和命令行参数
 * 打包返回配置参数
 *
 * @param options 命令行参数
 * @returns {{context: *, overwrite: {}}}
 */
module.exports = options => {
    let {context, buildPath} = options;

    // 打包结果目录
    if (buildPath && !buildPath.includes(path.sep)) {
        paths.mergePaths({appBuild: path.join(paths.appPath, buildPath)});
    }

    // 指定了 context && context 不是src 目录则修改 paths
    if (context && context !== paths.appSrc) {
        context = fs.realpathSync(context);
        paths.mergePaths({
            context,
            appHtml: path.join(context, 'index.html'),
            appIndexJs: path.join(context, 'index.js'),
            overwrite: path.join(context, 'config-overwrite.js'),
            mocker: path.join(context, 'mocker.js'),
        });
    } else {
        context = paths.appSrc;
    }

    // 确保 context 存在
    options.context = context;
    // 检查文件
    if (!checkRequiredFiles([
        context,
        paths.appHtml,
        paths.appIndexJs,
    ])) {
        clearConsole();
        console.log(chalk.red(mes));
        process.exit(1);
        return;
    }

    console.log(
        chalk.green(
            `\n 打包环境：${
                chalk.yellowBright(process.env.NODE_ENV)
                }\n 当前打包目录：${
                chalk.yellowBright(context)
                }`,
        ),
    );

    // config.overwrite.js
    const overwritePath = paths.overwrite;
    const overwriteFn = fs.existsSync(overwritePath) ? require(overwritePath) : {};

    // 重写配置对象
    const overwrite = typeof overwriteFn === 'function'
        ? overwriteFn(paths, getClientEnvironment().raw, options)
        : overwriteFn;

    // PUBLIC_URL 指定优先级
    // 1. 命令行 -r
    // 2. config-overwrite.js..homepage
    // 3. process.env.PUBLIC_URL
    // 4. package.json..homepage
    paths.mergePaths({
        publicUrl: options.root || overwrite.homepage || paths.publicUrl,
    });

    // 将命令行参数合并到配置对象
    return Object.assign({}, overwrite, options, {homepage: paths.publicUrl});
};