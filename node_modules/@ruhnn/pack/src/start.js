/* eslint-disable */
const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const {
    choosePort,
    createCompiler,
    prepareProxy,
    prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('./config/paths');
const configFactory = require('./config/webpack.config');
const createDevServerConfig = require('./config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

const {checkBrowsers} = require('react-dev-utils/browsersHelper');

module.exports = function (overwrite) {

    // 必须要有 browserlist 建议放 package.json::browserslist
    // 其它配置方式也允许
    checkBrowsers(paths.appPath, isInteractive)
    // 选择端口
        .then(() => choosePort(HOST, DEFAULT_PORT))
        .then(port => {
            if (port == null) {
                // 未选中端口
                return;
            }
            // 开发环境 webpack 配置
            const config = configFactory('development', overwrite);
            const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
            const appName = require(paths.appPackageJson).name;
            const useTypeScript = fs.existsSync(paths.appTsConfig);
            const urls = prepareUrls(protocol, HOST, port);
            const devSocket = {
                warnings: warnings => devServer.sockWrite(devServer.sockets, 'warnings', warnings),
                errors: errors => devServer.sockWrite(devServer.sockets, 'errors', errors),
            };

            // 创建 webpack 实例，格式化提示信息
            const compiler = createCompiler({
                appName,
                config,
                devSocket,
                urls,
                useYarn,
                useTypeScript,
                webpack,
            });

            // 正向代理配置
            const proxySetting = require(paths.appPackageJson).proxy;
            const proxyConfig = prepareProxy(proxySetting, paths.appPublic);

            // Webpack Server 配置
            const serverConfig = createDevServerConfig(
                // devServer.proxy 字段优先级
                // 1. config-overwrite.js
                // 2. package.json..proxy (String)
                proxyConfig,
                urls.lanUrlForConfig,
                // 重写 devServer 配置
                overwrite,
            );
            const devServer = new WebpackDevServer(compiler, serverConfig);
            // 启动 webpackDevServer
            devServer.listen(port, HOST, err => {
                if (err) {
                    return console.log(err);
                }
                if (isInteractive) {
                    clearConsole();
                }
                console.log(chalk.cyan('  启动服务...\n'));
                openBrowser(urls.localUrlForBrowser);
            });

            // 监听退出信号
            ['SIGINT', 'SIGTERM'].forEach(sig => {
                process.on(sig, () => {
                    devServer.close();
                    process.exit();
                });
            });
        })
        .catch(err => {
            if (err && err.message) {
                console.log(err.message);
            }
            process.exit(1);
        });
};